
@{
    ViewBag.Title = "QueryPageWithAjax";
}



<h2 style="text-align:center; color:crimson">Edit Page</h2>

<div class="tab">
    <button class="tablinks" onclick="openATab(event, 'Students')">Students</button>
    <button class="tablinks" onclick="openATab(event, 'Classes')">Classes</button>
    <button class="tablinks" onclick="openATab(event, 'Departments')">Departments</button>
    <button class="tablinks" onclick="openATab(event, 'Universities')">Universities</button>
</div>

<div id="Students" class="tabcontent">
    <h3>Students</h3>
    <ul>
        <li>
            <b> Find student by ID</b>
            <form class="FindStudentById">
                Please input ID of the student you want to find <input type="text" value="0001" name="studentID" />
                <button type="button" id="ReturnStudentById-btn">Find</button>
            </form>
            <div id="ReturnStudentById">

            </div>
        </li>
        <li>
            <b>Add Student</b>
            <form id="AddStudentForm">
                Please input ID <input type="text" value="0025" name="id" /><br />
                Please input Name <input type="text" value="Nguyen Van A" name="name" /><br />
                Please input Date of birth <input type="text" value="1/1/2001" name="date" /><br />
                Please input Class ID <input type="text" value="" name="cclass" /><br />
                Please input school ID <input type="text" value="" name="school" /><br />
                Please input Department ID <input type="text" value="" name="department" /><br />

                <button type="button" id="AddStudent-btn">Add</button>

            </form>
        </li>
        <li>
            <b>Get All Student</b>
            <form>
                <button type="button" id="GetAllStudent-btn">GetAllStudent</button>

            </form>
            <table id="ReturnAllStudent"> </table>
        </li>
        <li>
            <b>Delete Student</b>
            <form id="DeleteStudentForm">
                Please input ID <input type="text" value="0022" name="studentID" /><br />
                Please input school ID <input type="text" value="UIT" name="school" /><br />

                <button type="button" id="DeleteStudent-btn">Delete</button>

            </form>
        </li>
        <li>
            <b>Edit Student</b>
            <form>
                Please input ID <input id="studentIdForEdit" type="text" value="0001" name="studentID" /><br />

                <button type="button" id="EditStudent-btn">Edit</button>

            </form>
            <div>
                <form id="editStudentForm" style="display:none">
                    <h3>  Edit student : <br /></h3>
                    <input type="hidden" value='' name="id" height="0" width="0" /><br />
                    Please input Name <input type="text" value='' name="name" height="100" width="400" /><br />
                    Please input Date of birth <input type="text" value='' name="date" /><br />
                    Please input Class ID <input type="text" value='' name="cclass" /><br />
                    Please input school ID <input type="text" value='' name="school" /><br />
                    Please input Department ID <input type="text" value='' name="department" /><br />

                    <button type="button" id="SubmitEditStudent-btn">Edit</button>

                </form>


            </div>

        </li>


    </ul>
</div>

<div id="Classes" class="tabcontent">
    <h3>Classes</h3>
    <ul>
        <li>
            <b> Find class by ID</b>
            <form>
                Please input ID of the class you want to find <input id="findClassById" type="text" value="19C1" name="classID" />


                <button type="button" id="ReturnClassById-btn">Find</button>

            </form>
            <div id="ReturnClass"></div>
        </li>
        <li>
            <b>Add Class</b>
            <form id="addClassForm">
                Please input ID <input type="text" value="0025" name="id" /><br />
                Please input Name <input type="text" value="Nguyen Van A" name="name" /><br />
                Please input school ID <input type="text" value="" name="school" /><br />
                Please input Department ID <input type="text" value="" name="department" /><br />

                <button type="button" id="AddClass-btn">Add</button>

            </form>
        </li>
        <li>
            <b>Get All Class </b>
            <form>
                <button type="button" id="GetAllClass-btn">GetAllClass</button>

            </form>
            <table id="ReturnAllClass"> </table>

        </li>
        <li>
            <b>Delete Class</b>
            <form>
                Please input ID <input id="deleteClassId" type="text" value="2C20" name="classID" /><br />

                <button type="button" id="DeleteClass-btn">Delete</button>

            </form>
        </li>
        <li>
            <b>Edit Class</b>
            <form>
                Please input ID <input id="classIdForEdit" type="text" value="" name="classID" /><br />

                <button type="button" id="EditClass-btn">Edit</button>

            </form>
            <div>
                <form id="editClassForm" style="display:none">
                    <h3> Edit class  <br /></h3>
                    <input type="hidden" value='' name="id" height="0" width="0" /><br />
                    Please input Name <input type="text" value='' name="name" /><br />
                    Please input school ID <input type="text" value='' name="school" /><br />
                    Please input Department ID <input type="text" value='' name="department" /><br />

                    <button type="button" id="SubmitEditClass-btn">Edit</button>

                </form>


            </div>
        </li>


    </ul>
</div>

<div id="Departments" class="tabcontent">
    <h3>Departments</h3>
    <ul>
        <li>
            <b> Find department by ID</b>
            <form>
                Please input ID of the department you want to find <input id="departmentIdtofind" type="text" value="" name="departmentID" /><br />

                <button type="button" id="ReturnDepartmentById-btn">Find</button>

            </form>
            <div id="ReturnDepartment"> </div>
        </li>
        <li>
            <b>Add department</b>
            <form id="addDepartmentForm" >
                Please input ID <input type="text" value="" name="id" /><br />
                Please input Name <input type="text" value="" name="name" /><br />
                Please input school ID <input type="text" value="" name="school" /><br />

                <button type="button" id="AddDepartment-btn">Add</button>

            </form>
            
        </li>
        <li>
            <b>Get All Department </b>
            <form>
                <button type="button" id="GetAllDepartment-btn">GetAllDepartment</button>

            </form>
            <table id="ReturnAllDepartment"> </table>
        </li>
        <li>
            <b>Delete Department</b>
            <form>
                Please input ID <input id="deleteDepartmentId" type="text" value="" name="department" /><br />
                <button type="button" id="DeleteDepartment-btn">Delete</button>

            </form>
        </li>
        <li>
            <b>Edit Department</b>
            <form>
                Please input ID <input id="departmentIdForEdit" type="text" value="" name="departmentID" /><br />

                <button type="button" id="EditDepartment-btn">Edit</button>

            </form>
            <div>

                <form id="editDepartmentForm" style="display:none">
                    <h3> Edit Department  <br /></h3>
                    <input type="hidden" value='' name="id" height="0" width="0" /><br />
                    <input type="hidden" value='' name="school" height="0" width="0" /><br />
                    Please input Name <input type="text" value='' name="name" /><br />

                    <button type="button" id="SubmitEditDepartment-btn">Edit</button>

                </form>
            </div>
        </li>


    </ul>
</div>

<div id="Universities" class="tabcontent">
    <h3>Universities</h3>
    <ul>
        <li>
            <b> Find University by ID</b>
            <form>
                Please input ID of the university you want to find <input id="universityIdtoFind" type="text" value="" name="universityID" /><br />

                <button type="button" id="ReturnUniversityById-btn">Find</button>

            </form>
            <div id="ReturnUniversity"> </div>

        </li>
        <li>
            <b>Add University</b>
            <form id="addUniversityForm">
                Please input ID <input type="text" value="" name="id" /><br />
                Please input Name <input type="text" value="" name="name" /><br />

                <button type="button" id="AddUniversity-btn">Add</button>

            </form>
        </li>
        <li>
            <b>Get All University </b>
            <form>
                <button type="button" id="GetAllUniversity-btn">GetAllUniversity</button>

            </form>
            <table id="ReturnAllUniversity"> </table>

        </li>
        <li>
            <b>Delete University</b>
            <form>
                Please input ID <input id="deleteUniversityId" type="text" value="" name="id" /><br />
                <button type="button" id="DeleteUniversity-btn">Delete</button>

            </form>
        </li>
        <li>
            <b>Edit University</b>
            <form>
                Please input ID <input id="universityIdForEdit" type="text" value="" name="universityID" /><br />

                <button type="button" id="EditUniversity-btn">Edit</button>

            </form>
            <div>

                <form id="editUniversityForm" style="display:none">
                    <h3> Edit University  <br /></h3>
                    <input type="hidden" value='' name="id" height="0" width="0" /><br />
                    Please input Name <input type="text" value='' name="name" /><br />

                    <button type="button" id="SubmitEditUniversity-btn">Edit</button>

                </form>
            </div>
        </li>


    </ul>
</div>


<script>
    function openATab(evt, cityName) {
        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");
        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(cityName).style.display = "block";
        evt.currentTarget.className += " active";
    }


    document.getElementById("ReturnStudentById-btn").addEventListener("click", function () { returnStudentByID(document.getElementsByClassName("FindStudentById")[0].childNodes[1].value) });
    var addStudentForm = document.getElementById("AddStudentForm");
    document.getElementById("AddStudent-btn").addEventListener("click", function () {
        addStudent(addStudentForm.childNodes[1].value,
            addStudentForm.childNodes[4].value,
            addStudentForm.childNodes[7].value,
            addStudentForm.childNodes[10].value,
            addStudentForm.childNodes[13].value,
            addStudentForm.childNodes[16].value)
    })
    document.getElementById("GetAllStudent-btn").addEventListener("click", function () { returnAllStudent(); })
    document.getElementById("DeleteStudent-btn").addEventListener("click", function () { deleteStudent(document.getElementById("DeleteStudentForm").childNodes[1].value, document.getElementById("DeleteStudentForm").childNodes[4].value) })
    document.getElementById("EditStudent-btn").addEventListener("click", function () { editStudentCall(document.getElementById("studentIdForEdit").value); })
    var editStudentForm = document.getElementById("editStudentForm");
    document.getElementById("SubmitEditStudent-btn").addEventListener("click", function () {
        doneEditStudent(
            document.getElementById("studentIdForEdit").value,
            editStudentForm.childNodes[6].value,
            editStudentForm.childNodes[9].value,
            editStudentForm.childNodes[12].value,
            editStudentForm.childNodes[15].value,
            editStudentForm.childNodes[18].value)
    })

    document.getElementById("ReturnClassById-btn").addEventListener("click", function () { returnClassByID(document.getElementById("findClassById").value) });
    var addClassForm = document.getElementById("addClassForm");
    document.getElementById("AddClass-btn").addEventListener("click", function () {
        addClass(
            addClassForm.childNodes[1].value,
            addClassForm.childNodes[4].value,
            addClassForm.childNodes[7].value,
            addClassForm.childNodes[10].value,

        )
    });
    document.getElementById("GetAllClass-btn").addEventListener("click", function () { returnAllClass() });
    document.getElementById("DeleteClass-btn").addEventListener("click", function () {
        deleteClass(document.getElementById("deleteClassId").value)
    });
    document.getElementById("EditClass-btn").addEventListener("click", function () { editClassCall(document.getElementById("classIdForEdit").value); })
    var editClassForm = document.getElementById("editClassForm");
    document.getElementById("SubmitEditClass-btn").addEventListener("click", function () {
        doneEditClass(
            document.getElementById("classIdForEdit").value,
            editClassForm.childNodes[6].value,
            editClassForm.childNodes[9].value,
            editClassForm.childNodes[12].value)
    })

    document.getElementById("ReturnDepartmentById-btn").addEventListener("click", function () { returnDepartmentByID(document.getElementById("departmentIdtofind").value); })
    var addDepartmentForm = document.getElementById("addDepartmentForm");
    document.getElementById("AddDepartment-btn").addEventListener("click", function () {
        addDepartmet(
            addDepartmentForm.childNodes[1].value,
            addDepartmentForm.childNodes[4].value,
            addDepartmentForm.childNodes[7].value
        )
    });
    document.getElementById("GetAllDepartment-btn").addEventListener("click", function () { returnAllDepartment() });
    document.getElementById("DeleteDepartment-btn").addEventListener("click", function () { deleteDepartment(document.getElementById("deleteDepartmentId").value) });
    document.getElementById("EditDepartment-btn").addEventListener("click", function () { editDepartmentCall(document.getElementById("departmentIdForEdit").value) });
    var editDepartmentForm = document.getElementById("editDepartmentForm");
    document.getElementById("SubmitEditDepartment-btn").addEventListener("click", function () {
        doneEditDepartment(
            document.getElementById("departmentIdForEdit").value,
            editDepartmentForm.childNodes[9].value
        )

    })

    document.getElementById("ReturnUniversityById-btn").addEventListener("click", function () { returnUniversityByID(document.getElementById("universityIdtoFind").value); })
    var addUniversityForm = document.getElementById("addUniversityForm");
    document.getElementById("AddUniversity-btn").addEventListener("click", function () {
        addUniversity(
            addUniversityForm.childNodes[1].value,
            addUniversityForm.childNodes[4].value,
        )
    });
    document.getElementById("GetAllUniversity-btn").addEventListener("click", function () { returnAllUniversity()});
    document.getElementById("DeleteUniversity-btn").addEventListener("click", function () { deleteUniversity(document.getElementById("deleteUniversityId").value) });
    document.getElementById("EditUniversity-btn").addEventListener("click", function () { editUniversityCall(document.getElementById("universityIdForEdit").value) });
    var editUniversityForm = document.getElementById("editUniversityForm");
    document.getElementById("SubmitEditUniversity-btn").addEventListener("click", function () {
        doneEditUniversity(
            document.getElementById("universityIdForEdit").value,
            editUniversityForm.childNodes[6].value
        )

    })





    function returnStudentByID(studentId) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/ReturnStudentByID?studentID=" + studentId, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var parsed = JSON.parse(this.responseText);
                document.getElementById("ReturnStudentById").innerHTML = (
                    "Name: " + parsed.STU_NAME
                    + " UNI: " + parsed.UNI_ID
                    + " DEP: " + parsed.DEP_ID
                    + " CLASS: " + parsed.CLA_ID);
            }
        };
        alert("Finding...");


    }
    function addStudent(id, name, date, cclass, school, department) {

        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/AddStudent?id=" + id + "&name=" + name + "&date=" + date + "&cclass=" + cclass + "&school=" + school + "&department=" + department, true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert("Done adding student with id= " + id);
            }
        }
    }
    function returnAllStudent() {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/GetAllStudent", true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                var parsed = JSON.parse(this.responseText);

                let table = "<tr><th>ID</th><th>Name</th><th>class</th><th>UNI</th></tr>";
                for (let i = 0; i < parsed.length; i++) {
                    table += "<tr><td>" +
                        parsed[i].ID +
                        "</td><td>" +
                        parsed[i].STU_NAME +
                        "</td><td>" +
                        parsed[i].CLA_ID +
                        "</td><td>" +
                        parsed[i].UNI_ID +
                        "</td></tr>";
                }
                document.getElementById("ReturnAllStudent").innerHTML = table;

            }
        }
    }
    function deleteStudent(studentId, school) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/DeleteStudent?studentID=" + studentId + "&school=" + school, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                alert("Xoa voi id= " + studentId);

            }
        };


    }
    function editStudentCall(studentId) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/EditStudent?studentID=" + studentId, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var parsed = JSON.parse(this.responseText);

                var form = document.getElementById("editStudentForm");
                form.style.display = "block";
                form.childNodes[1] = parsed.STU_NAME;
                form.childNodes[3].value = parsed.ID;
                form.childNodes[6].value = parsed.STU_NAME;

                var value = parsed.DATE_OF_BIRTH;
                value = new Date(parseInt(value.replace("/Date(", "").replace(")/", ""), 10));
                value = convert(value);
                form.childNodes[9].value = value;
                form.childNodes[12].value = parsed.CLA_ID;
                form.childNodes[15].value = parsed.UNI_ID;
                form.childNodes[18].value = parsed.DEP_ID;
            }
        };

    }
    function doneEditStudent(id, name, date, cclass, school, department) {

        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/DoneEditStudent?id=" + id + "&name=" + name + "&date=" + date + "&cclass=" + cclass + "&school=" + school + "&department=" + department, true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert(JSON.parse(this.responseText));
                var form = document.getElementById("editStudentForm");
                form.style.display = "none";
            }
        }
    }

    function returnClassByID(classId) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/ReturnClassByID?classID=" + classId, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var parsed = JSON.parse(this.responseText);
                document.getElementById("ReturnClass").innerHTML = (
                    "Name: " + parsed.CLA_NAME
                    + " UNI: " + parsed.UNI_ID
                    + " DEP: " + parsed.DEP_ID
                );
            }
        };
        alert("Finding...");


    }
    function addClass(id, name, school, department) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/AddClass?id=" + id + "&name=" + name + "&school=" + school + "&department=" + department, true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert("Done adding class with id= " + id);
            }
        }
    }
    function returnAllClass() {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/GetAllClass", true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                var parsed = JSON.parse(this.responseText);

                let table = "<tr><th>ID</th><th>Name</th><th>department</th><th>UNI</th></tr>";
                for (let i = 0; i < parsed.length; i++) {
                    table += "<tr><td>" +
                        parsed[i].ID +
                        "</td><td>" +
                        parsed[i].CLA_NAME +
                        "</td><td>" +
                        parsed[i].DEP_ID +
                        "</td><td>" +
                        parsed[i].UNI_ID +
                        "</td></tr>";
                }
                document.getElementById("ReturnAllClass").innerHTML = table;

            }
        }
    }
    function deleteClass(classID) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/DeleteClass?classID=" + classID, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                alert("Xoa voi id= " + classID);

            }
        };
    }
    function editClassCall(classId) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/EditClass?classId=" + classId, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var parsed = JSON.parse(this.responseText);
                var form = document.getElementById("editClassForm");
                form.style.display = "block";
                form.childNodes[3].value = parsed.ID;
                form.childNodes[6].value = parsed.CLA_NAME;
                form.childNodes[9].value = parsed.UNI_ID;
                form.childNodes[12].value = parsed.DEP_ID;
            }
        };

    }
    function doneEditClass(id, name, school, department) {

        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/DoneEditClass?id=" + id + "&name=" + name + "&school=" + school + "&department=" + department, true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert("done edit");
                var form = document.getElementById("editClassForm");
                form.style.display = "none";
            }
        }
    }

    function returnDepartmentByID(departmentID) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/ReturnDepartmentByID?departmentID=" + departmentID, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var parsed = JSON.parse(this.responseText);
                document.getElementById("ReturnDepartment").innerHTML = (
                    "Name: " + parsed.DEP_NAME
                    + " UNI: " + parsed.UNI_ID
                );
            }
        };
        alert("Finding...");


    }
    function addDepartmet(id, name, school) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/AddDepartment?id=" + id + "&name=" + name + "&school=" + school, true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert("Done adding dep with id= " + id);
            }
        }
    }
    function returnAllDepartment() {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/GetAllDepartment", true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                var parsed = JSON.parse(this.responseText);

                let table = "<tr><th>ID</th><th>Name</th><th>UNI</th></tr>";
                for (let i = 0; i < parsed.length; i++) {
                    table += "<tr><td>" +
                        parsed[i].ID +
                        "</td><td>" +
                        parsed[i].DEP_NAME +
                        "</td><td>" +
                       
                        parsed[i].UNI_ID +
                        "</td></tr>";
                }
                document.getElementById("ReturnAllDepartment").innerHTML = table;

            }
        }
    }
    function deleteDepartment(id) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/DeleteDepartment?department=" + id, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                alert("Xoa voi id= " + id);

            }
        };
    }
    function editDepartmentCall(Id) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/EditDepartment?departmentId=" + Id, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var parsed = JSON.parse(this.responseText);
                var form = document.getElementById("editDepartmentForm");
                form.style.display = "block";
                form.childNodes[3].value = parsed.ID;
                form.childNodes[6].value = parsed.DEP_NAME;
                form.childNodes[9].value = parsed.DEP_NAME;
            }
        };

    }
    function doneEditDepartment(id, name, school) {

        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/DoneEditDepartment?id=" + id + "&name=" + name  , true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert("done edit");
                var form = document.getElementById("editDepartmentForm");
                form.style.display = "none";
            }
        }
    }

    function returnUniversityByID(id) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/ReturnUniversityByID?universityID=" + id, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var parsed = JSON.parse(this.responseText);
                document.getElementById("ReturnUniversity").innerHTML = (
                    "Name: " + parsed.UNI_NAME
                );
            }
        };
        alert("Finding...");


    }
    function addUniversity(id, name) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/AddUniversity?id=" + id + "&name=" + name , true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert("Done adding UNI with id= " + id);
            }
        }
    }
    function returnAllUniversity() {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/GetAllUniversity", true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                var parsed = JSON.parse(this.responseText);

                let table = "<tr><th>ID</th><th>Name</th></tr>";
                for (let i = 0; i < parsed.length; i++) {
                    table += "<tr><td>" +
                        parsed[i].ID +
                        "</td><td>" +
                        
                       
                        parsed[i].UNI_NAME +
                        "</td></tr>";
                }
                document.getElementById("ReturnAllUniversity").innerHTML = table;

            }
        }
    }
    function deleteUniversity(id) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/DeleteUniversity?id=" + id, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                alert("Xoa voi id= " + id);

            }
        };
    }
    function editUniversityCall(Id) {
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/EditorWithAjax/EditUniversity?universityID=" + Id, true);
        xhttp.send();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var parsed = JSON.parse(this.responseText);
                var form = document.getElementById("editUniversityForm");
                form.style.display = "block";
                form.childNodes[3].value = parsed.ID;
                form.childNodes[6].value = parsed.UNI_NAME;
            }
        };

    }
    function doneEditUniversity(id, name) {

        var xhttp = new XMLHttpRequest();
        xhttp.open("POST", "/EditorWithAjax/DoneEditUniversity?id=" + id + "&name=" + name  , true);
        xhttp.send();
        xhttp.onreadystatechange = function () { // Call a function when the state changes.
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert("done edit");
                var form = document.getElementById("editUniversityForm");
                form.style.display = "none";
            }
        }
    }





    function convert(str) {
        var date = new Date(str),
            mnth = ("0" + (date.getMonth() + 1)).slice(-2),
            day = ("0" + date.getDate()).slice(-2);
        return [mnth, day, date.getFullYear()].join("/");
    }
    function toJavaScriptDate(value) {
        var pattern = /Date(([^)]+))/;
        var results = pattern.exec(value);
        var dt = new Date(parseFloat(results[1]));
        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
    }

</script>
<style>
    body {
    }

    /* Style the tab */
    .tab {
        overflow: hidden;
        border: 1px solid #ccc;
        background-color: #f1f1f1;
        align-self: center;
        align-content: center;
    }

        /* Style the buttons inside the tab */
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
        }

            /* Change background color of buttons on hover */
            .tab button:hover {
                background-color: #ddd;
            }

            /* Create an active/current tablink class */
            .tab button.active {
                background-color: #ccc;
            }

    /* Style the tab content */
    .tabcontent {
        display: none;
        padding: 6px 12px;
        border: 1px solid #ccc;
        border-top: none;
    }
</style>